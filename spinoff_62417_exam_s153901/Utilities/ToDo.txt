Skærme:
Skærm 0: tast virksomhedens ID
Skærm 1: vælg møde-holder eller deltager
Skærm 2: mødeholder valgt, indtast data om mødet.
Skærm 3: Deltager valgt, indtast møde id (evt. Lav popup på startskærm istedet?)
Skærm 4: Deltager valgt, giv hvert spørgsmål en 1-5 rating
Skærm 4.5: Tak for din feedback -> log ud
Skærm 5: Mødeholder skal kunne se info om sit møde efter folk har stemt.


Møde info:
Dato, sted, start, slut
Møde formål -> punkt 1, 2, 3 (dagsorden)

Der skal logges om mødet startes til tiden og om deltagerne kommer til tiden

Mødes evalueres efter:
Vurdering af mødeledelsen
Vurdering af tidsstyring
Vurderings af mulighed for forberedelse
Alle punkter på dagsordenen (var dette punkt værdifuldt for mig)




DATABASE:::::::::
Standardspørgsmål skal automatisk tilføjes i appen
Mødeleders spørgsmål skal vurderes fra 1-5
Derefter standardspørgsmål 1-5::::
Kvalitet af mødeindkaldelse
Mulighed for forberedelse
Møde ledelse
Tidsstyring
Mit eget engagement som mødedeltager
Overordnet mødevurdering








Firestore
Tillad alt: service cloud.firestore {
match /databases/{database}/documents {
match /{document=**} {
allow read, write;
}
}
}


Tillad ikke alt:
service cloud.firestore {
match /databases/{database}/documents {
match /{document=**} {
allow read, write: if false;
}
}
}





Upload svar::::::
var answers = [Int]()
answers.append(1)
answers.append(2)
answers.append(3)
answers.append(4)
answers.append(5)


Firestore.firestore().collection(COMPANY_REF).document("spinoff").collection(MEETING_REF).document("1").collection(ANSWERS_REF).addDocument(data: [
"1" : answers[0],
"2" : answers[1],
"3" : answers[2],
"4" : answers[3],
"5" : answers[4],
]
) { (error) in
if let error = error {
debugPrint("Error adding document: \(error)")
}
self.navigationController?.popViewController(animated: true)
}




WORKING!!!!!::::

var answers = [Int]()
answers.append(7)
answers.append(6)
answers.append(5)
answers.append(4)
answers.append(3)
answers.append(2)
answers.append(1)


var userInfoTest = [String: Int]()

for index in 1...answers.count {
userInfoTest[String(index)] = answers[index-1]
//            print("Index: \(index), Value: \(answers[index-1])")
}







UPLOAD DATA

var answers = [Int]()
answers.append(7)
answers.append(6)
answers.append(5)
answers.append(4)
answers.append(3)
answers.append(2)
answers.append(1)


var userInfoTest = [String: Int]()

for index in 1...answers.count {
userInfoTest[String(index)] = answers[index-1]
//            print("Index: \(index), Value: \(answers[index-1])")
}

//        for item in userInfo {
//            print("Key: \(item.key), Value: \(item.value) ")
//        }



//        Firestore.firestore().collection(COMPANY_REF).document("spinoff").collection(MEETING_REF).document("1").collection(ANSWERS_REF).addDocument(data: userInfoTest
//        ) { (error) in
//            if let error = error {
//                debugPrint("Error adding document: \(error)")
//            }
//            self.navigationController?.popViewController(animated: true)
//        }




DONE Hvis man går tilbage uden at have uploadet til firebase skal ens entry slettes
DONE Sæt fokus på nyeste textfield i opret møde -> Skaber fejl
DONE Lav en register company -> Prøv at lave "Virksomhed eksistere allerede"
DONE Tilføj company eksistere ikke til startskærm.
DONE App Ikon -> Farvekode #8dc63f
DONE Ændrer hvor "Log ud" går hen når man har været mødedeltager.
DONE Flyt alle tekst variabler til Constants
DONE Fix at UI ikke rykker med ned på startskærmen command+k
DONE Lav statistik grøn også
DONE Fik autoscroll på opret møde
DONE Lav et launchscreen logo
DONE Fix at den går 2x tilbage fra statistik altid
DONE Lav så man kan se titel, starttid etc. når man har klikket ind på et møde -> over tableviewet

Eventuelt:
Log brugere
Søjlediagrammer
Lav knappen rund og spin når man validater input.
